<#@ template debug="false" hostspecific="True" language="C#" #>
<#@ assembly name="$(TargetDir)TypeLite.dll" #>
<#@ assembly name="$(TargetDir)TypeLite.Net4.dll" #>
<#@ assembly name="$(TargetDir)$(TargetFileName)" #>

<#@ import namespace="TypeLite" #> 
<#@ import namespace="TypeLite.Net4" #> 
<#@output extension=".d.ts"#>

 <#@include file="Manager.ttinclude"#>
<# var manager = Manager.Create(Host, GenerationEnvironment); #>

<# var ts = TypeScript.Definitions()
		.WithReference("Enums.ts")
		.ForLoadedAssemblies().WithMemberFormatter(identifier => Char.ToLower(identifier.Name[0]) + identifier.Name.Substring(1))
		.WithMemberTypeFormatter((tsProperty, memberTypeName) => 
                {
                    if (tsProperty.PropertyType.Type.IsEnum) return "string";
                    if (tsProperty.PropertyType.Type.GetInterfaces().Contains(typeof(System.Collections.IEnumerable)))
                    {
                        if (tsProperty.PropertyType.Type.IsGenericType && tsProperty.PropertyType.Type.GetGenericArguments()[0].IsEnum)
                        {
                            return "string[]";
                        }
                    }
                    return memberTypeName;
                });

#>

<#= ts.Generate(TsGeneratorOutput.Properties) #>

<# manager.StartNewFile("Enums.ts"); #>
<#= ts.Generate(TsGeneratorOutput.Enums) #>
<# manager.EndBlock(); #>
<# manager.Process(true); #>